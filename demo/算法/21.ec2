算始 生成质数序列 (n)
    n := 整数(n)
    若始 (n < 2)
        返回 []
    若又 (n == 2)
        返回 [2]
    若终

    primes := [2]
    k := 3
    当始 (k <= n)

        i := 0
        flag := 真      # 这个标志先假定 k 为质数
        当始 (primes[i] != 未定义)
            若始 (k % primes[i] == 0)
                flag := 假  # k 是个合数，设置 flag 为假
                跳出        # 不用继续判断，跳出循环
            若终   
            i := i + 1
        当终

        # 若 flag 未被修改为 假，
        # 则表明没有已知质数可以整除 k，
        # 也就是说 k 是质数
        若始 (flag == 真)
            primes := primes + [k]
        若终

        k := k + 1
    当终

    返回 primes
算终